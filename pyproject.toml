[tool.poetry]
name = "pandasai"
version = "0.6.3"
description = "Pandas AI is a Python library that integrates generative artificial intelligence capabilities into Pandas, making dataframes conversational."
authors = ["Gabriele Venturi"]
license = "MIT"
readme = "README.md"
packages = [{include = "pandasai"}]

[tool.poetry.dependencies]
python = ">=3.9,<3.9.7 || >3.9.7,<4.0"
python-dotenv = "^1.0.0"
pandas = ">=2.0.0"
astor = "^0.8.1"
openai = "^0.27.5"
ipython = "^8.13.1"
matplotlib = "^3.7.1"
google-generativeai = { version = "^0.1.0rc2", optional = true }
langchain = { version = "^0.0.199", optional = true}

[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
pre-commit = "^3.2.2"
ruff = "^0.0.220"
pytest = "^7.3.1"
pytest-mock = "^3.10.0"
pytest-env = "^0.8.1"
click = "^8.1.3"

[tool.poetry.extras]
google = ["google-generativeai"]
tests = ["numpy", "seaborn"]
langchain = ["langchain"]

[tool.poetry.group.whitelist.dependencies]
statsmodels = {version = "^0.14.0", optional = true}
scikit-learn = {version = "^1.2.2", optional = true}
seaborn = {version = "^0.12.2", optional = true}
plotly = {version = "^5.14.1", optional = true}
ggplot = {version = "^0.11.5", optional = true}
numpy = {version = "^1.17", optional = true}
scipy = {version = "^1.9.0", optional = true}
streamlit = { version = "^1.23.1", optional = true }

[tool.poetry.group.docs.dependencies]
mkdocs = "1.4.0"
mkdocstrings-python = "0.7.1"
markdown-include = "^0.6.0"

[tool.poetry.scripts]
pai = "pai.__main__:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
args = ["-C"]

[tool.ruff]
select = ["ALL"]

ignore = [
    "ARG", # flake8-unused-arguments
    "COM", # flake8-commas
    "D", # pydocstyle
    "EM", # flake8-errmsg
    "FBT", # flake8-boolean-trap
    "FIX", # flake8-fixme
    "I", # isort
    "TD", # flake8-todo
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    "ANN101", # Missing type annotation for `self` in method
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "ANN204", # Missing return type annotation for special method
    "ANN205", # Missing return type annotation for staticmethod
    "B028", # flake8-bugbear No explicit stacklevel keyword argument found
    "C408", # Unnecessary {obj_type} call (rewrite as a literal)
    "C901", # mccabe: {name} is too complex ({complexity} > {max_complexity})
    "DJ008", # flake8-django: Model does not define __str__ method
    "E501", # Line too long ({width} > {limit} characters)
    "G004", # flake8-logging-format Logging statement uses f-string
    "N817", # pep8-naming: CamelCase {name} imported as acronym {asname}
    "PERF401", # Use a list comprehension to create a transformed list
    "PLR0911", # Too many branches ({branches} > {max_branches})
    "PLR0912", # Too many return statements ({returns} > {max_returns})
    "PLR0913", # Too many arguments to function call
    "PLW2901", # `for` loop variable `key` overwritten by assignment target
    "PT011", # flake-8 pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    "RET502", # Do not implicitly return None in function able to return non-None value
    "RET503", # Missing explicit return at the end of function able to return non-None value
    "RET504", # Unnecessary assignment to `new_focuses` before `return` statement
    "RUF100", # Unused blanket `noqa` directive
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF013", # PEP 484 prohibits implicit `Optional`
    "S301", # pickle and modules that wrap it can be unsafe when used to load untrusted data, possible security issue
    "SIM102", # Use a single if statement instead of nested if statements
    "SLF001", # flake8-self: Private member accessed
    "TCH001", # Move application import {} into a type-checking block
    "TCH002", # Move third-party import {} into a type-checking block
    "TRY003", # Avoid specifying long messages outside the exception class
]

unfixable = ["ERA001"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ANN"]

[tool.ruff.flake8-pytest-style]
mark-parentheses = false

[tool.isort]
profile = "black"
line_length = 120
order_by_type = "False"
skip = ["venv"]
